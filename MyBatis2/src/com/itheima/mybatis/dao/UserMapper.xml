<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!-- namespace命令空间特殊作用，如果使用mapper动态代理方法，这里就需要配置mapper接口地址 -->
<mapper namespace="com.itheima.mybatis.dao.UserMapper">
   <!-- 开启二级缓存 -->
   <cache/>
   <!--根据用户id查宿一条记录(返回单条记录)-->
   <!-- 
      select标签表示sql查询，内容会封装到Mapped Statement中。
                  可以将这个select标签称为一个Statement
      id:Statement的id,用于标识select中定义的sql,id是同一个命名空间中不允许重复
      #{}:表示一个占位符，避免sql注入
      parameterType:表示输入参数的类型
      resultType:表示输出 结果集单条记录映射的java对象类型，select查询得到字段名和resultType中属性名一致，才能映射成功
      
    -->
    <select id="findUserById" parameterType="int" resultType="user">
        
         SELECT * FROM USER WHERE id=#{id}
    </select>     
      
      <!-- 查询用户列表(返回List集合)-->
      <!-- 
                           不管结果查询一条还是多条，resultType指定结果集单条记录映射的java对象类型
        ${}:表示sql拼接,相当于sql字符串拼接，无法避免sql注入
        ${value}:value表示parameter输入参数的变量，如果输入参数是简单类型，使用${}拼接符，变量名必须使用value
        ${value}直接将value获取到拼接在sql中，value值不加任何修饰
       -->
      <select id="findUserList" parameterType="java.lang.String" resultType="com.itheima.mybatis.pojo.User">
        
          SELECT * FROM USER WHERE username LIKE '%${value}%';
          
      </select>
      
       <!-- 添加用户
            parameterType:如果paramterType指定是POJO,在#{}中指定pojo的属性名获取该pojo属性值
        -->
         <insert id="insertUser" parameterType="com.itheima.mybatis.pojo.User">
         
         <!-- 
            keyProperty:将主键设置到pojo中那个属性中
            order:selectKey中sql执行的时机
            resultType:selectKey中sql的执行的结果类型
            LAST_INSERT_ID:是insert后获取自增主键值
          -->
          
          <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
               select LAST_INSERT_ID();
          </selectKey>
          
           insert into user(username,birthday,sex,address,detail,score)
           values(#{username},#{birthday},#{sex},#{address},#{detail},#{score})
           </insert>
           
           <!-- 根据主键删除用户 -->
            <delete id="deleteUser" parameterType="int">
                 delete from user where id=#{id}
            </delete>
            
            <!-- 根据主键用户更新
                                                     更新传入输入参数内容，id和更新的信息
             -->
             <update id="updateUser" parameterType="com.itheima.mybatis.pojo.User">
                  update user set username=#{username},birthday=#{birthday},sex=#{sex},address=#{address} where id=#{id}
             </update>
</mapper>
